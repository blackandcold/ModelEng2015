-- @path Views=/at.ac.tuwien.big.views.transformations/metamodel/views.ecore

module Domains2Views;
create OUT : Views from IN : Views;

--Helper
helper def: id : Integer = 0;
helper context Integer def : inc() : Integer = self + 1;
helper def: newID() : Integer = 
	let id : Integer = thisModule.inc()
	in
	id;

-- create start view
helper def: isStartView(clazz : Views!Class) : Boolean = 
	-- start view does not exists
	if (Views!CreateView.allInstances() -> select(x | x.startView = true) -> size() = 0 ) then 
		-- class has no associations
		if (Views!Association.allInstances() -> collect(as | as.associationEnds).flatten() -> select(pr | pr.type.name = clazz.name) -> size() = 0) then 
			true
		else
			false
		endif
	else
		false
	endif;
	
-- first letter to upper case
helper def: firstToUpper(name : String) : String =
	let first : String = name.substring(1, 1).toUpper()
	in first + name.substring(2, name.size());


helper def: getAllProperties(clazz : Views!Class) : Sequence(Views!Property) = 
	let props : Sequence (Views!Property) = clazz.properties
	in
	if (not clazz.superClass.oclIsUndefined()) then
		props.union(thisModule.getAllProperties(clazz.superClass))
	else
		props
	endif;

helper def: getViewElement(ps : Sequence(Views!Property)) : Sequence(Views!ViewElement) =
	let ve : Sequence(Views!ViewElement) = ps -> collect(p | 
	

	if (p.type.name = 'String') then
		thisModule.Property2Text(p)
	else
		if (p.type.name = 'Integer') then
			thisModule.Property2Integer(p)
		else
			if (p.type.name = 'Double') then
				thisModule.Property2Double(p)
			else
				if (p.type.name = 'DateTime') then
					thisModule.Property2DatePicker(p)
				else
					if (p.type.oclIsTypeOf(Views!Enumeration)) then
						thisModule.Property2Selection(p)
					else
						OclUndefined
					endif
				endif
			endif
		endif
	endif)
	in
	ve
	;
	
helper def: getEnumeration(en : Views!Enumeration) : Sequence(Views!EnumerationLiteralItem) = 
	let items : Sequence(Views!EnumerationLiteralItem) = en.literals -> asSequence() -> collect(el | thisModule.EnumerationLiteral2EnumerationLiteralItem(el))
	in
	items
	;

--helper def: toProperty(p : Views!Type) : Views!Property =
--	let pTyped : Views!Property = p
--	in
--	pTyped;

-- Rules
rule Class2ClassIndexView {
	from
		cl : Views!Class
		
	to
		cv : Views!CreateView (
			header <- cl.name,
			name <- cl.name,	
			layout <- thisModule.LayoutHorizontal(),
			startView <- thisModule.isStartView(cl),
					
			--elementGroups <-
			elementGroups <- thisModule.Class2ElementGroup(cl)
			
		)
	do { -- replace do?
		cv.class <- cl;
	}
	
}

lazy rule Class2ElementGroup{
	from 
		cl: Views!Class
	to
		eg : Views!ElementGroup(
			header <- cl.name + ' Information',
			layout <- thisModule.LayoutVertical(),
			-- viewElements <- cl.properties -> collect(x | thisModule.PropertyToViewElement(x)) -> flatten() -> asSet() -- kind of works?
			--viewElements <- thisModule.getAllProperties(cl)  -> collect(x | thisModule.resolveTemp(x, 'viewElement')).debug() -> asSet()
			-- viewElements <- thisModule.getAllProperties(cl)  -> collect(x | thisModule.getViewElement(x)) -> asSet().debug()
			viewElements <- thisModule.getViewElement(thisModule.getAllProperties(cl)) -> asSet()
			-- TODO duplicate properties
			
		)
}

lazy rule Association2ElementGroup{
	from 
		cl: Views!Class
	to
		eg : Views!ElementGroup(
			header <- cl.name + ' Information',
			layout <- thisModule.LayoutVertical(),
			-- viewElements <- cl.properties -> collect(x | thisModule.PropertyToViewElement(x)) -> flatten() -> asSet() -- kind of works?
			-- viewElements <- thisModule.getAllProperties(cl)  -> collect(x | thisModule.resolveTemp(x, 'viewElement')) -> asSet()
			viewElements <- thisModule.getAllProperties(cl)  -> collect(x | thisModule.getViewElement(x)) -> asSet()

			
		)
}

--lazy abstract rule Property2ViewElement{
--	from
--		p : Views!Property
--	to
--		viewElement : Views!Text(
--			label <- thisModule.firstToUpper(p.name)
--			-- property <- p.oclType().debug()
--		)
--}

lazy rule Property2Text{-- extends Property2ViewElement{
	from
		p : Views!Property
	to
		viewElement: Views!Text(
			label <- thisModule.firstToUpper(p.name),
			format <- '^[a-zA-Z -]+$',
			property <- p
		)
	do {
		thisModule.id <- thisModule.id.inc();
		viewElement.elementID <- thisModule.id.toString(); 
	}
}

lazy rule Property2Integer{ -- extends Property2ViewElement{
	-- created as text view
	from
		p : Views!Property
	to
		viewElement: Views!Text(
			label <- thisModule.firstToUpper(p.name),
			format <- '^[0-9]+$',
			property <- p
		)
	do {
		thisModule.id <- thisModule.id.inc();
		viewElement.elementID <- thisModule.id.toString(); 
	}
}

lazy rule Property2Double {-- extends Property2ViewElement{
	-- created as text view
	from
		p : Views!Property
	to
		viewElement: Views!Text(
			label <- thisModule.firstToUpper(p.name),
			format <- '^[0-9]+\\[0-9]$',
			property <- p
		)
	do {
		thisModule.id <- thisModule.id.inc();
		viewElement.elementID <- thisModule.id.toString(); 
	}
}

lazy rule Property2DatePicker {-- extends Property2ViewElement{
	from
		p : Views!Property
	to
		viewElement: Views!DateTimePicker(
			label <- thisModule.firstToUpper(p.name),
			format <- 'dddd, MMMM Do YYYY, h:mm A',
			property <- p
		)
	do {
		thisModule.id <- thisModule.id.inc();
		viewElement.elementID <- thisModule.id.toString(); 
	}
}

lazy rule Property2Selection {-- extends Property2ViewElement{
	from
		p : Views!Property
	to
		viewElement: Views!Selection(
			label <- thisModule.firstToUpper(p.name),
			selectionItems <- thisModule.getEnumeration(p.type) -> asSet(),
			property <- p
		)
	do {
		thisModule.id <- thisModule.id.inc();
		viewElement.elementID <- thisModule.id.toString(); 
	}
}

lazy rule EnumerationLiteral2EnumerationLiteralItem {
	from
		el : Views!EnumerationLiteral
	to
		eli : Views!EnumerationLiteralItem(
			value <- el.name,
			enumerationLiteral <- el
		)
}

lazy rule LayoutVertical{
	from 
		clLay : Views!Class
	to
		lay : Views!Layout (
			alignment <- #Vertical
		)
}

lazy rule LayoutHorizontal{
	from 
		clLay : Views!Class
	to
		lay : Views!Layout (
			alignment <- #Horizontal
		)
}



rule DomainModel2ViewModel {
	from
		dm : Views!DomainModel
	to 
		vg : Views!ViewGroup(
			welcomeViewGroup <- true,
			name <- 'Welcome View Group',
			views <- dm.domainModelElements -> collect(x | thisModule.resolveTemp(x, 'cv'))
			),
		vm : Views!ViewModel (
			viewGroups <- vg	
		)
		
}

