-- @path Views=/at.ac.tuwien.big.views.transformations/metamodel/views.ecore

module Domains2Views;
create OUT : Views from IN : Views;

helper def: id : Integer = 0;
helper context Integer def : inc() : Integer = self + 1;




rule Class2ClassIndexView {
	from
		cl : Views!Class
		
	to
		cv : Views!CreateView (
			header <- cl.name,
			name <- cl.name,
			description <- 'class index view of ' + cl.name,
			
			layout <- thisModule.LayoutHorizontal(), -- helper with boolean?
			
			--elementGroups <-
			elementGroups <- thisModule.PropertyToElementGroup(cl.properties.first())
			
		)
	do { -- replace do?
		cv.class <- cl;
		cv.elementGroups.first().viewElements <- cl.properties -> collect(x | thisModule.PropertyToViewElement(x)) -> flatten() -> asSet();
	}
	
}

lazy rule PropertyToViewElement{
	from
		p : Views!Property
	to
		g : Views!Text(
			label <- p.name	
		)
	do {
		p.debug();
	}
}

lazy rule PropertyToElementGroup{
	from 
		p : Views!Property
	to
		eg : Views!ElementGroup(
			header <- 'dummy'--'Header ' + p.name	
		)
}

lazy rule LayoutVertical{
	from 
		clLay : Views!Class
	to
		lay : Views!Layout (
			alignment <- #Vertical
		)
}

lazy rule LayoutHorizontal{
	from 
		clLay : Views!Class
	to
		lay : Views!Layout (
			alignment <- #Horizontal
		)
}



rule DomainModel2ViewModel {
	from
		dm : Views!DomainModel
	to 
		vg : Views!ViewGroup(
			welcomeViewGroup <- true,
			name <- 'Welcome View Group',
			views <- dm.domainModelElements -> collect(x | thisModule.resolveTemp(x, 'cv'))
			),
		vm : Views!ViewModel (
			viewGroups <- vg	
		)
		
}

--rule Property2ElementGroup {
--	from 
--		pr : Views!Property
--	to 
--		eg : Views!Text()
--	
--}
