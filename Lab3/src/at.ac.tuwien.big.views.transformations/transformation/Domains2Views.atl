-- @path Views=/at.ac.tuwien.big.views.transformations/metamodel/views.ecore

module Domains2Views;
create OUT : Views from IN : Views;

--Helper
helper def: id : Integer = 0;
helper context Integer def : inc() : Integer = self + 1;

-- create start view
helper def: isStartView(clazz : Views!Class) : Boolean = 
	-- start view does not exists
	if (Views!CreateView.allInstances() -> select(x | x.startView = true) -> size() = 0 ) then 
		-- class has no associations
		if (Views!Association.allInstances() -> collect(as | as.associationEnds).flatten() -> select(pr | pr.type.name = clazz.name) -> size() = 0) then 
			true
		else
			false
		endif
	else
		false
	endif;
	
-- first letter to upper case
helper def: firstToUpper(name : String) : String =
	let first : String = name.substring(1, 1).toUpper()
	in first + name.substring(2, name.size());


-- Rules
rule Class2ClassIndexView {
	from
		cl : Views!Class
		
	to
		cv : Views!CreateView (
			header <- cl.name,
			name <- cl.name,	
			layout <- thisModule.LayoutHorizontal(), -- helper with boolean?
			startView <- thisModule.isStartView(cl),
					
			--elementGroups <-
			elementGroups <- thisModule.ClassToElementGroup(cl)
			
		)
	do { -- replace do?
		cv.class <- cl;
	}
	
}

lazy rule ClassToElementGroup{
	from 
		cl : Views!Class
	to
		eg : Views!ElementGroup(
			header <- cl.name + ' Information',
			layout <- thisModule.LayoutVertical(),
			-- viewElements <- cl.properties -> collect(x | thisModule.PropertyToViewElement(x)) -> flatten() -> asSet() -- kind of works?
			viewElements <- cl.properties -> collect(x | thisModule.resolveTemp(x, 'viewElement')) -> asSet() -- TODO properties of superclasses
			
		)
}

abstract rule Property2ViewElement{
	from
		p : Views!Property
	to
		viewElement : Views!Text(
			label <- thisModule.firstToUpper(p.name)
		)
}

rule Property2Text extends Property2ViewElement{
	from
		p : Views!Property(p.type.name='String')
	to
		viewElement: Views!Text(
			format <- '^[a-zA-Z -]+$'
		)
	do {
		viewElement.property <- p;
		thisModule.id <- thisModule.id.inc();
		viewElement.elementID <- thisModule.id.toString(); 
		-- p.debug();
		-- p.type.debug();
		-- p.type.name.debug();
	}
}

rule Property2Integer extends Property2ViewElement{
	-- created as text view
	from
		p : Views!Property(p.type.name='Integer')
	to
		viewElement: Views!Text(
			format <- '^[0-9]+$'
		)
	do {
		viewElement.property <- p;
		thisModule.id <- thisModule.id.inc();
		viewElement.elementID <- thisModule.id.toString(); 
		-- p.debug();
		-- p.type.debug();
		-- p.type.name.debug();
	}
}

rule Property2DatePicker extends Property2ViewElement{
	from
		p : Views!Property(p.type.name='DateTime')
	to
		viewElement: Views!DateTimePicker(
		)
	do {
		viewElement.property <- p;
		thisModule.id <- thisModule.id.inc();
		viewElement.elementID <- thisModule.id.toString(); 
		-- p.debug();
		-- p.type.debug();
		-- p.type.name.debug();
	}
}

rule Property2Enumeration extends Property2ViewElement{
	from
		p : Views!Property(p.type.name='Enumeration')
	to
		viewElement: Views!Selection(
			label <- p.type.toString()
		)
	do {
		viewElement.property <- p;
		thisModule.id <- thisModule.id.inc();
		viewElement.elementID <- thisModule.id.toString(); 
		-- p.debug();
		-- p.type.debug();
		-- p.type.name.debug();
	}
}


lazy rule LayoutVertical{
	from 
		clLay : Views!Class
	to
		lay : Views!Layout (
			alignment <- #Vertical
		)
}

lazy rule LayoutHorizontal{
	from 
		clLay : Views!Class
	to
		lay : Views!Layout (
			alignment <- #Horizontal
		)
}



rule DomainModel2ViewModel {
	from
		dm : Views!DomainModel
	to 
		vg : Views!ViewGroup(
			welcomeViewGroup <- true,
			name <- 'Welcome View Group',
			views <- dm.domainModelElements -> collect(x | thisModule.resolveTemp(x, 'cv'))
			),
		vm : Views!ViewModel (
			viewGroups <- vg	
		)
		
}

--rule Property2ElementGroup {
--	from 
--		pr : Views!Property
--	to 
--		eg : Views!Text()
--	
--}
