grammar at.ac.tuwien.big.views.view.View with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/views" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// implement your grammar here, starting with the root element: ViewModel

ViewModel returns ViewModel:
	(viewGroups+=ViewGroup)*;

ViewGroup returns ViewGroup:
	welcomeViewGroup?="welcome"? "viewgroup" name=ID
	"{"
		(views+= (View) ",")*
		(views+= (View))
	"}"
;

View returns View:
	 ClassOperationView | ClassIndexView
;

ClassOperationView returns ClassOperationView:
	CreateView | ReadView | UpdateView | DeleteView
;

CreateView returns CreateView:
	layout=Layout startView?="start"? "create-view" name = ID header = STRING "handles" class=[Class|QualifiedName]
	"{"
	("view-description" description= STRING)?
	(elementGroups+=ElementGroup ",")*
	(elementGroups+=ElementGroup)
	"}"
;

ReadView returns ReadView:
	layout=Layout startView?="start"? "read-view" name = ID header = STRING "handles" class=[Class|QualifiedName]
	"{"
	("view-description" description= STRING)?
	(elementGroups+=ElementGroup ",")*
	(elementGroups+=ElementGroup)
	"}"
;

UpdateView returns UpdateView:
	layout=Layout startView?="start"? "update-view" name = ID header = STRING "handles" class=[Class|QualifiedName]
	"{"
	("view-description" description= STRING)?
	(elementGroups+=ElementGroup ",")*
	(elementGroups+=ElementGroup)
	"}"
;

DeleteView returns DeleteView:
	layout=Layout startView?="start"? "delete-view" name = ID header = STRING "handles" class=[Class|QualifiedName]
	"{"
	("view-description" description= STRING)?
	(elementGroups+=ElementGroup ",")*
	(elementGroups+=ElementGroup)
	"}"
;

ClassIndexView returns ClassIndexView:
	startView?="start"? "index-view" name = ID header = STRING "handles" class=[Class|QualifiedName]
	"{"
	("view-description" description= STRING)?
	(link+=Link)*
	"}"
;
	
	
ElementGroup returns ElementGroup:
	layout=Layout "elementgroup" header = STRING "contains"?
	"{"
	(viewElements+=(ViewElement) ",")*
	(viewElements+=(ViewElement))
	"}" ("with" condition=(Condition))?

;

ViewElement returns ViewElement:
	AssociationElement | PropertyElement
;

AssociationElement returns AssociationElement:
	List | Table
;



List returns List:
	"list" elementID = ID label = STRING "handles" association=[Association|QualifiedName]
	"{"
		(link+=Link ",")*
		(link+=Link)
	"}" ("with" condition=(Condition))?
;	



Table returns Table:
	"table" elementID = ID label = STRING "handles" association=[Association|QualifiedName]
	"{"		
		(((columns+=Column) | (link+=Link)) ",")*
		( (columns+=Column) | (link+=Link)     )
		
	"}" ("with" condition=(Condition))?
;

PropertyElement returns PropertyElement:
	Column | Text | DateTimePicker | Selection
;



Column returns Column:
	"column" elementID= ID label= STRING "handles" property=[Property|QualifiedName]
	("with" condition=(Condition))?
;	


Text returns Text:
	long?="long"? "text" elementID=ID label=STRING ("format" format=RegExp)? "handles" property=[Property|QualifiedName]
	("with" condition=(Condition))?
;	



DateTimePicker returns DateTimePicker:
	"date-time-picker" elementID= ID label=STRING ("format" format=DateFormat)? "handles"  property=[Property|QualifiedName]
	("with" condition=(Condition))?
;	


Selection returns Selection:
	"selection" elementID=ID label=STRING "handles" property=[Property|QualifiedName]
	"{"
		(((selectionItems+=SelectionItem ',')* (selectionItems+=SelectionItem))
			| ((selectionItems+=EnumerationLiteralItem ',')* (selectionItems+=EnumerationLiteralItem)))
	"}" ("with" condition=(Condition))?
;	

	
EnumerationLiteralItem returns EnumerationLiteralItem:
	"enum-literal" value=STRING "handles" enumerationLiteral=[EnumerationLiteral|QualifiedName]
;


SelectionItem returns SelectionItem:
	"selection-item" value= STRING	
;

Condition returns Condition:
	VisibilityCondition
;

VisibilityCondition returns VisibilityCondition:
	ComparisonCondition | CompositeCondition
;

ComparisonCondition returns ComparisonCondition:
	"comparison-condition" conditionID=ID ":" property=[PropertyElement|QualifiedName] comparisonType=ComparisonConditionType comparisonValue=STRING  '?' type=VisibilityConditionType
	
;


CompositeCondition returns CompositeCondition:
	"composite-condition" conditionID=ID ":"
	"("
		composedConditions+=(ComparisonCondition) compositionType=CompositeConditionType composedConditions+=(ComparisonCondition)
		
	")" "?" type=VisibilityConditionType
		
;


/** recursion error
 * http://blog.efftinge.de/2010/08/parsing-expressions-with-xtext.html
 * https://dslmeinte.wordpress.com/2011/12/05/using-syntactic-predicates-in-xtext-part-1/
CompositeCondition returns CompositeCondition:
	"composite-condition" conditionID=ID ":"
	"("
		//CompositeConditionLeaf ({CompositeCondition.composedConditions+=current} compositionType=CompositeConditionType composedConditions+=(VisibilityCondition))
	composedConditions+=(CompositeConditionTree | CompositeConditionLeaf) compositionType=CompositeConditionType composedConditions+=(CompositeConditionTree | CompositeConditionLeaf)
		
	")" "?" type=VisibilityConditionType
		
;

CompositeConditionTree returns CompositeCondition:
"composite-condition" conditionID=ID ":"
	"("
		//CompositeConditionLeaf ({CompositeCondition.composedConditions+=current} compositionType=CompositeConditionType composedConditions+=(VisibilityCondition))
	composedConditions+=(CompositeConditionLeaf) compositionType=CompositeConditionType composedConditions+=(CompositeConditionLeaf)
		
	")" "?" type=VisibilityConditionType
		
;


CompositeConditionLeaf returns CompositeCondition:
"composite-condition" conditionID=ID ":"
	"("
		composedConditions+=(ComparisonCondition) compositionType=CompositeConditionType composedConditions+=(ComparisonCondition)
	")" "?" type=VisibilityConditionType
;*/

	
EInt returns ecore::EInt:
	'-'? INT;

QualifiedName returns ecore::EString: 
	ID (=> '.'ID)*;

RegExp:
	STRING

;
	
DateFormat:
	STRING

;

Layout returns Layout:
	alignment=LayoutStyle
;

enum LayoutStyle returns LayoutStyle:
	Vertical = "vertical" |
	Horizontal = "horizontal"	
;

enum CompositeConditionType returns CompositeConditionType:
	And = "&&" |
	Or = "||"
;

enum VisibilityConditionType returns VisibilityConditionType:
	Hide = "Hide" |
	Show = "Show" |
	Enable = "Enable" |
	Disable = "Disable"
		
;

enum ComparisonConditionType returns ComparisonConditionType:
	Equal = "==" |
	Less = "<" |
	Greater = ">"
;

Link returns Link:
	"link" label = STRING "handles" targetView=[ClassOperationView|QualifiedName]
;



