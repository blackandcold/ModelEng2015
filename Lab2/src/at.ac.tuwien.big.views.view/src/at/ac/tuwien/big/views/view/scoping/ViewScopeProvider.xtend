/*
 * generated by Xtext
 */
package at.ac.tuwien.big.views.view.scoping

import at.ac.tuwien.big.views.Class
import at.ac.tuwien.big.views.Property
import at.ac.tuwien.big.views.Text
import at.ac.tuwien.big.views.View
import at.ac.tuwien.big.views.impl.ViewImpl
import java.util.ArrayList
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 * 
 */
class ViewScopeProvider extends AbstractDeclarativeScopeProvider {

	def public IScope scope_Text_property(Text txt, EReference ref) {
		
//		if (txt instanceof Text && ref.equals(ViewsPackage.Literals.PROPERTY_ELEMENT__PROPERTY)) {
//			val view = getView(txt)
//			val list = view.class_.properties.toList
//			val scope = Scopes.scopeFor(list)
//			return scope
//		}
		System.out.println("DEFAULT CONTEXT:" + txt.class.simpleName + " REF:" + ref.name + " ")
		return IScope.NULLSCOPE
	}

	def View getView(EObject obj) {
		if (obj instanceof ViewImpl) {
			return obj as View
		} else if (obj != null) {
			return getView(obj.eContainer)
		}
		return null
	}

	def List<Property> getProps(Class clazz) {
		val list = new ArrayList<Property>();
		if (clazz.superClass != null) {
			list.addAll(getProps(clazz.superClass))
		}
		if (clazz.properties != null) {
			list.addAll(clazz.properties)
		}
		return list
	}

	def IScope getScopeForClass(EObject context, EReference ref, Class clazz, String logname) {
		val list = getProps(clazz)
		System.out.println(
			logname + " CONTEXT:" + context.class.simpleName + " REF:" + ref.name + " CLASS:" + clazz.name + " " +
				list.map [
					it.name
				])
		return Scopes.scopeFor(list)
	}

//	override getScope(EObject context, EReference reference) {
//		val view = getView(context)
//
//		// Text
//		if (view != null && (context instanceof Text || context instanceof DateTimePicker || context instanceof Selection || context instanceof ViewGroup ) &&
//			reference.equals(ViewsPackage.Literals.PROPERTY_ELEMENT__PROPERTY)) {
//			return getScopeForClass(context, reference, view.class_, "TEXT")
//		}
//
////		// DateTimePicker
////		if (view != null && context instanceof DateTimePicker &&
////			reference.equals(ViewsPackage.Literals.PROPERTY_ELEMENT__PROPERTY)) {
////			return getScopeForClass(context, reference, view.class_, "DATETIMEPICKER")
////		}
////
////		// Selection
////		if (view != null && context instanceof Selection &&
////			reference.equals(ViewsPackage.Literals.PROPERTY_ELEMENT__PROPERTY)) {
////			return getScopeForClass(context, reference, view.class_, "SELECTION")
////		}
//
//		// return IScope.NULLSCOPE
//		val scope = super.getScope(context, reference)
//		System.out.println("DEFAULT CONTEXT:" + context.class.simpleName + " REF:" + reference.name + " " +
//			scope.allElements.map[it.name])
//		return super.getScope(context, reference)
//	}
}
