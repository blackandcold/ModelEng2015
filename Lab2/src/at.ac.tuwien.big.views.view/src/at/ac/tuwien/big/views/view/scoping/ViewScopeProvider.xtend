/*
 * generated by Xtext
 */
package at.ac.tuwien.big.views.view.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import at.ac.tuwien.big.views.ViewElement

import static org.eclipse.xtext.scoping.Scopes.*;
import at.ac.tuwien.big.views.View
import at.ac.tuwien.big.views.Text
import at.ac.tuwien.big.views.ViewsPackage
import org.eclipse.xtext.EcoreUtil2
import at.ac.tuwien.big.views.ViewGroup
import at.ac.tuwien.big.views.impl.TextImpl
import at.ac.tuwien.big.views.impl.ViewImpl

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class ViewScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {

	def scope_Text_property(Text txt, EReference ref){
		//println txt
		println txt.eContainer
		println txt.eContainingFeature
		val v = txt.eContainer as View
		println v
	}
	
	def View getView(EObject obj){
		if(obj instanceof ViewImpl){
			return obj as View
		}else{
			return getView(obj.eContainer)	
		}
		
	}
	
	override getScope(EObject context, EReference reference) {
		if(context instanceof TextImpl && reference.equals(ViewsPackage.Literals.PROPERTY_ELEMENT__PROPERTY)){
			//val views = context.eContainer.eContents.filter(View);
			//val view = views.get(0) as View
			val view = getView(context)
			val list = view.class_.properties.toList
			return scopeFor(list) 
		}
		
		return super.getScope(context, reference)
	}
		
}
